name: Create Release

on:
  push:
    tags:
      - '*.*.*'
    #branches:
    #  - master

jobs:
  create_release:
    #if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Find Readme File
        id: find_readme
        run: |
          for file in README.txt README.md Readme.txt Readme.md readme.txt readme.md; do
            if [ -f "$file" ]; then
              echo "Readme file found: $file"
              echo "readme_file=$file" >> $GITHUB_ENV
              break
            fi
          done
          if [ -z "${{ env.readme_file }}" ]; then
            echo "::error::Readme file not found."
            exit 1
          fi

      - name: Extract Release Notes
        id: release_notes
        run: |
          changelog_section_start="== Changelog =="
          readme_file="${{ env.readme_file }}"

          in_changelog=0
          release_notes=""
          while IFS= read -r line; do
            if [[ "$line" == "$changelog_section_start" ]]; then
              in_changelog=1
              continue
            fi

            if [[ $in_changelog -eq 1 && $(echo "$line" | grep -E '^==') ]]; then
              break
            fi

            if [[ $in_changelog -eq 1 && -n "$line" ]]; then
              release_notes+="$line\n"
            fi
          done < "$readme_file"

          if [[ -z "$release_notes" ]]; then
            echo "::error::Failed to extract release notes from the changelog section."
            exit 1
          fi

          echo "RELEASE_NOTES=$release_notes" >> $GITHUB_ENV

      - name: Create zip file
        run: |
          REPO_NAME=$(basename `git rev-parse --show-toplevel`)
          zip -r ${REPO_NAME}.zip . -x '*.git*' -x '.github/*' -x '*.distignore*' -x 'CHANGELOG.txt'
          echo "repo_name=${REPO_NAME}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: "${{ github.ref_name }}"
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.repo_name }}.zip
          asset_name: ${{ env.repo_name }}.zip
          asset_content_type: application/zip