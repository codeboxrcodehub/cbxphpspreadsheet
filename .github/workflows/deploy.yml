name: Create Release

on:
  push:
    tags:
      - '*.*.*'
    branches:
      - master

jobs:
  create_release:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3 # Use v3 for better performance and security
        with:
          fetch-depth: 0

      - name: Read version from readme.txt
        id: read_version
        run: |
          VERSION=$(grep -oP 'Stable tag: \K[0-9.]+' readme.txt) # Use \K to only capture the version
          echo "plugin_version=$VERSION" >> $GITHUB_ENV

      - name: Get latest tag
        id: get_latest_tag
        run: |
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0) # --abbrev=0 to get full tag name
          if [[ -z "$LATEST_TAG" ]]; then
            echo "No tags found"
            exit 1
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_ENV

      - name: Extract Changelog
        id: extract_changelog
        run: |
          START=$(grep -n "== Changelog ==" readme.txt | cut -d: -f1)
          if [[ -z "$START" ]]; then
            echo "::error::Changelog section not found."
            exit 1
          fi
          START=$((START + 1)) # Start from the line after "== Changelog =="

          # Extract changelog until the next top-level heading or end of file
          END=$(grep -n -m 1 -E "^==|^$" readme.txt | tail -n 1 | cut -d: -f1) # find next heading or EOF
          if [[ -z "$END" ]]; then
            END=$(wc -l < readme.txt) # If no next heading, use EOF
          fi
          END=$((END - 1)) # End one line before the next heading

          if [[ $START -gt $END ]]; then # Handle cases where there is no changelog content
            echo "::warning::No changelog content found."
            echo "" > CHANGELOG.txt # create empty file
          else
            sed -n "${START},${END}p" readme.txt > CHANGELOG.txt
          fi

          CHANGELOG_CONTENT=$(cat CHANGELOG.txt)
          echo "changelog=$CHANGELOG_CONTENT" >> $GITHUB_ENV

      - name: Create zip file
        run: |
          REPO_NAME=$(basename `git rev-parse --show-toplevel`)
          zip -r ${REPO_NAME}.zip . -x '*.git*' -x '.github/*' -x '*.distignore*' -x 'CHANGELOG.txt'
          echo "repo_name=${REPO_NAME}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.latest_tag }}
          release_name: "Release ${{ env.plugin_version }}"
          body: ${{ env.changelog }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ env.repo_name }}.zip
          asset_name: ${{ env.repo_name }}.zip
          asset_content_type: application/zip